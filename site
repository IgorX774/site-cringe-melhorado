<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ordenando Vetores</title>
    <script src="ordenando.js" defer></script>
</head>
<body>
    <h1>Ordenação de Vetores</h1>
    <input type="number" id="valor" placeholder="Digite um número">
    <button onclick="add()">Adicionar</button>

    <select id="algoritmo">
        <option value="bubble_sort">Bubble Sort</option>
        <option value="selection_sort">Selection Sort</option>
        <option value="quick_sort">Quick Sort</option>
    </select>

    <button onclick="ordenar()">Ordenar</button>
    <button onclick="misturar()">Misturar</button>

    <ul id="valores"></ul>
</body>
</html>
// Função para troca de valores
const swap = (vetor, i, j) => {
    [vetor[i], vetor[j]] = [vetor[j], vetor[i]];
};

// Função para embaralhar
const shuffle = (vetor, trocas) => {
    for (let i = 0; i < trocas; i++) {
        const a = Math.floor(Math.random() * vetor.length);
        const b = Math.floor(Math.random() * vetor.length);
        swap(vetor, a, b);
    }
};

// Algoritmos de ordenação
const bubble_sort = (vetor) => {
    for (let i = 0; i < vetor.length; i++) {
        for (let j = 0; j < vetor.length - 1; j++) {
            if (vetor[j] > vetor[j + 1]) swap(vetor, j, j + 1);
        }
    }
    return vetor;
};

const selection_sort = (vetor) => {
    for (let i = 0; i < vetor.length; i++) {
        let min = i;
        for (let j = i + 1; j < vetor.length; j++) {
            if (vetor[j] < vetor[min]) min = j;
        }
        swap(vetor, i, min);
    }
    return vetor;
};

const quick_sort = (vetor, inicio, fim) => {
    if (inicio < fim) {
        let pi = particionamento(vetor, inicio, fim);
        quick_sort(vetor, inicio, pi - 1);
        quick_sort(vetor, pi + 1, fim);
    }
    return vetor;
};

const particionamento = (vetor, inicio, fim) => {
    let pivot = vetor[fim];
    let i = inicio - 1;
    for (let j = inicio; j < fim; j++) {
        if (vetor[j] < pivot) {
            i++;
            swap(vetor, i, j);
        }
    }
    swap(vetor, i + 1, fim);
    return i + 1;
};

// Função para adicionar valor à lista
function add() {
    const valor = document.getElementById('valor').value;
    if (valor === '') return;

    const ul = document.getElementById('valores');
    const li = document.createElement('li');
    li.textContent = valor;
    ul.appendChild(li);
}

// Função para ordenar
function ordenar() {
    const ul = document.getElementById('valores');
    const valores = Array.from(ul.children).map(li => parseInt(li.innerHTML));
    const algoritmo = document.getElementById('algoritmo').value;

    switch (algoritmo) {
        case 'bubble_sort':
            bubble_sort(valores);
            break;
        case 'selection_sort':
            selection_sort(valores);
            break;
        case 'quick_sort':
            quick_sort(valores, 0, valores.length - 1);
            break;
    }

    ul.innerHTML = valores.map(valor => `<li>${valor}</li>`).join('');
}

// Função para misturar os valores
function misturar() {
    const ul = document.getElementById('valores');
    const valores = Array.from(ul.children).map(li => parseInt(li.innerHTML));
    shuffle(valores, 10);
    ul.innerHTML = valores.map(valor => `<li>${valor}</li>`).join('');
}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Catálogo de Receitas</title>
    <!-- Incluindo Bootstrap para estilos -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="receitas.js" defer></script>
</head>
<body class="bg-warning" onload="preencheCatalogo()">
    <div class="container-fluid">
        <h1 class="text-center">Catálogo de Receitas</h1>
        <div class="d-flex flex-wrap" id="pnlCatalogo"></div>
    </div>
</body>
</html>
// Definindo o vetor de receitas com JSON
const receitas = [
    {
        titulo: "Bolo de Cenoura",
        imagem: "imagens/bolo_cenoura.png",
        preparo: "Misture tudo e leve ao forno por 40 minutos.",
        ingredientes: ["Cenoura", "Farinha", "Açúcar", "Ovos", "Fermento"]
    },
    {
        titulo: "Pão de Queijo",
        imagem: "imagens/pao_queijo.png",
        preparo: "Misture os ingredientes e asse por 30 minutos.",
        ingredientes: ["Polvilho", "Queijo", "Leite", "Ovos", "Sal"]
    }
    // Adicione mais receitas conforme necessário
];

// Função para gerar a lista de ingredientes em HTML
function getListaIngredientes(receita) {
    let lista = "<ul>";
    lista += receita.ingredientes.map(ingrediente => `<li>${ingrediente}</li>`).join("");
    lista += "</ul>";
    return lista;
}

// Função para gerar um card de receita
function getCard(receita) {
    return `
        <div class="card" style="width: 250px; margin: 10px;">
            <img src="${receita.imagem}" class="card-img-top" alt="${receita.titulo}">
            <div class="card-body">
                <h5 class="card-title">${receita.titulo}</h5>
                <div class="card-text">
                    ${getListaIngredientes(receita)}
                    <hr>
                    <p>${receita.preparo}</p>
                </div>
            </div>
        </div>
    `;
}

// Função para preencher o catálogo de receitas na página
function preencheCatalogo() {
    const pnlCatalogo = document.getElementById('pnlCatalogo');
    pnlCatalogo.innerHTML = receitas.map(receita => getCard(receita)).join('');
}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Usuários de Teste via REST</title>
    <!-- Incluindo Bootstrap e Vue.js -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
</head>
<body class="container bg-warning">
    <h1>Usuários de Teste via REST</h1>
    <p>Dados obtidos de <a href="https://reqres.in" target="_blank">reqres.in</a></p>

    <div id="usuarios" class="container-fluid">
        <div class="row">
            <div class="col-12 col-md-4" v-for="(user, index) in users" :key="index">
                <div class="card m-3 p-2">
                    <img :src="user.avatar" class="card-img-top" alt="Foto de {{user.first_name}}">
                    <div class="card-body">
                        <h5 class="card-title">{{user.first_name}} {{user.last_name}}</h5>
                        <p class="card-text">{{user.email}}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="usuarios.js"></script>
</body>
</html>
new Vue({
    el: '#usuarios',
    data() {
        return {
            users: []
        };
    },
    mounted() {
        this.loadUsers();
    },
    methods: {
        loadUsers() {
            fetch('https://reqres.in/api/users?per_page=10')
                .then(response => response.json())
                .then(data => {
                    this.users = data.data;
                })
                .catch(error => console.log('Erro ao carregar usuários:', error));
        }
    }
});
